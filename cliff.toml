# git-cliff configuration for release-plz
[changelog]
# Header template for the changelog
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""
# Body template for each release
body = """
{% if version -%}
## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
## [Unreleased]
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
### {{ group | upper_first }}
{% for commit in commits %}
- {{ commit.message | upper_first }}{% if commit.breaking %} [**BREAKING**]{% endif %}
{%- endfor %}
{% endfor %}
"""
# Footer template
footer = ""
# Remove leading and trailing whitespace
trim = true

[git]
# Parse conventional commits
conventional_commits = true
# Filter out commits that don't match conventional format
filter_unconventional = false
# Process each line of the commit message
split_commits = false
# Regex for commit preprocessors
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/example/release-test-project/issues/${2}))" },
]
# Commit parsers for grouping
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^doc", group = "Documentation" },
    { message = "^perf", group = "Performance" },
    { message = "^refactor", group = "Refactor" },
    { message = "^style", group = "Styling" },
    { message = "^test", group = "Testing" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore", group = "Miscellaneous Tasks" },
    { body = ".*security", group = "Security" },
]
# Protect breaking changes
protect_breaking_commits = false
# Filter commits
filter_commits = false
# Sort commits chronologically
sort_commits = "oldest"